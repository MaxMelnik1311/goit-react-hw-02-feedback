{"version":3,"sources":["components/Section/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","key","shortid","generate","type","onClick","Section","title","statTitle","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","plus","setState","prevState","countTotalFeedbacks","Object","values","reduce","current","countPercentage","posVotes","totalVotes","this","percentage","keys","Component","ReactDOM","render","document","getElementById"],"mappings":"6OAyBeA,MArBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,6BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,4BACEC,IAAKC,IAAQC,WACbC,KAAK,SACLC,QAAS,kBAAMP,EAAgBE,KAE9BA,QCQIM,MAjBf,YAAkE,IAA/CT,EAA8C,EAA9CA,QAASU,EAAqC,EAArCA,MAAOT,EAA8B,EAA9BA,gBAAiBU,EAAa,EAAbA,UAClD,OACE,oCACE,4BAAKD,GACL,kBAAC,EAAD,CAAiBV,QAASA,EAASC,gBAAiBA,IACpD,4BAAKU,KCcIC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,oCACE,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,EAAxB,OCCSC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAKA,ICCOC,E,2MACnBC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,KAAO,SAAAnB,GACL,EAAKoB,UAAS,SAAAC,GACZ,OAAO,eACJrB,EAASqB,EAAUrB,GAAU,O,EAKpCsB,oBAAsB,WACpB,OAAOC,OAAOC,OAAO,EAAKN,OAAOO,QAC/B,SAACZ,EAAOa,GAAR,OAAoBb,EAAQa,IAC5B,I,EAIJC,gBAAkB,SAACC,EAAUC,GAC3B,OAAQD,EAAWC,EAAc,K,wEAGzB,IAAD,EACwBC,KAAKZ,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQiB,KAAKR,sBACbS,EAAaD,KAAKH,gBAAgBjB,EAAMG,GAK9C,OACE,oCACE,kBAAC,EAAD,CACEN,MAPQ,uBAQRV,QAAS0B,OAAOS,KAAKF,KAAKZ,OAC1BpB,gBAAiBgC,KAAKX,KACtBX,UATY,eAWbK,EAAQ,EACP,kBAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBiB,IAGtB,kBAAC,EAAD,CAAcf,QAnBJ,2B,GAhCaiB,aCDjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2446e594.chunk.js","sourcesContent":["import React from 'react';\r\nimport T from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <button\r\n          key={shortid.generate()}\r\n          type=\"button\"\r\n          onClick={() => onLeaveFeedback(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: T.arrayOf({}).isRequired,\r\n  onLeaveFeedback: T.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport FeedbackOptions from './FeedbackOptions';\r\n\r\nfunction Section({ options, title, onLeaveFeedback, statTitle }) {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\r\n      <h1>{statTitle}</h1>\r\n    </>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  options: T.arrayOf({}).isRequired,\r\n  title: T.string.isRequired,\r\n  onLeaveFeedback: T.func.isRequired,\r\n  statTitle: T.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <>\r\n      <h3>Good: {good}</h3>\r\n      <h3>Neutral: {neutral}</h3>\r\n      <h3>Bad: {bad}</h3>\r\n      <h3>Total: {total}</h3>\r\n      <h3>Positive feedback: {positivePercentage}%</h3>\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: T.number.isRequired,\r\n  neutral: T.number.isRequired,\r\n  bad: T.number.isRequired,\r\n  total: T.number.isRequired,\r\n  positivePercentage: T.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\n\r\nfunction Notification({ message }) {\r\n  return <h3>{message}</h3>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: T.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport Section from './components/Section/Section';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport Notification from './components/Notification/Notification';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  plus = option => {\r\n    this.setState(prevState => {\r\n      return {\r\n        [option]: prevState[option] + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  countTotalFeedbacks = () => {\r\n    return Object.values(this.state).reduce(\r\n      (total, current) => total + current,\r\n      0,\r\n    );\r\n  };\r\n\r\n  countPercentage = (posVotes, totalVotes) => {\r\n    return (posVotes / totalVotes) * 100;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedbacks();\r\n    const percentage = this.countPercentage(good, total);\r\n    const title = 'Please give feedback';\r\n    const statTitle = 'Statistics';\r\n    const message = 'No feedback given';\r\n\r\n    return (\r\n      <>\r\n        <Section\r\n          title={title}\r\n          options={Object.keys(this.state)}\r\n          onLeaveFeedback={this.plus}\r\n          statTitle={statTitle}\r\n        />\r\n        {total > 0 ? (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={total}\r\n            positivePercentage={percentage}\r\n          />\r\n        ) : (\r\n          <Notification message={message} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}